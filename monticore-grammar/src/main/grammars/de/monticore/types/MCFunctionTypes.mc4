/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.types.*;

/**
 * This grammar introduces function types
 * such as int -> int, (String -> int) -> void, (boolean, int) -> int
 * 
 * This grammar is part of a hierarchy of types, namely
 * * types.MCBasicTypes.mc4       
 *   * types/MCFunctionTypes.mc4
 *
*/

component grammar MCFunctionTypes
          extends MCBasicTypes {


  /*=================================================================*/

  /** ASTMCFunctionTypesType represents function types.
   * 
   *  Any number of arguments is possible.
  */
  MCFunctionParTypes =
    "(" (
    (MCType || ",")+
    (isElliptic:"...")?
    )? ")"
  ;

  MCFunctionType implements MCType <80> =
    <rightassoc>
    MCFunctionParTypes "->"
    MCReturnType
  ;

  /** ASTMCFunctionTypeNoParentheses represents function types
   * that have exactly one parameter without any parentheses.
   *
   * This non-terminal is separate from MCFunctionType
   * to avoid Antlr issues due to mutual left recursion.
   */
  MCFunctionTypeNoParentheses implements MCType <60> =
    <rightassoc>
    parameter:MCType "->"
    MCReturnType
  ;

}
