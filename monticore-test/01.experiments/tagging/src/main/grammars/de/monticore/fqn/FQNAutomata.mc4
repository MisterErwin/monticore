/* (c) https://github.com/MontiCore/monticore */
package de.monticore.fqn;

grammar FQNAutomata extends de.monticore.MCBasics {

/** A ASTAutomaton represents a finite automaton
    @attribute name Name of the automaton
    @attribute states List of states
    @attribute transitions List of transitions
*/
symbol Automaton =
  "automaton" Name "{" (AutomatonElement)* "}" ;

interface AutomatonElement;

/** A ASTState represents a state of a finite automaton
    @attribute name Name of state
    @attribute initial True if state is initial state
    @attribute final True if state is a final state
    @attribute states List of sub states
    @attribute transitions List of transitions
*/
symbol State implements ScopedStateElement =
  "state" Name
  
  (("<<" ["initial"] ">>" ) | ("<<" ["final"] ">>" ))*
  
  ( ("{" (State | Transition)* "}") | ";") ;


/** A ASTTransition represents a transition
    @attribute from Name of the state from which the transitions starts
    @attribute input Activation signal for this transition
    @attribute to Name of the state to which the transitions goes
*/ 
Transition implements ScopedStateElement =
  from:Name "-" input:Name ">" to:Name ";" ;


symbol scope ScopedState implements ScopedStateElement =
  "scopedstate" Name "{" ScopedStateElement* "}" ;

interface ScopedStateElement extends AutomatonElement;

}
