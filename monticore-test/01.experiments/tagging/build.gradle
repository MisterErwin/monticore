/* (c) https://github.com/MontiCore/monticore */
description = 'Experiments: tagging'

// The grammars of this subproject are built by the generateMCGrammars MCGenTask

// Additional (tagging) tests require TagDef/TagSchema grammars.
// Those tests are present in a withGen sourceSet
// Only run these tests if genTagging is true
if (("true").equals(getProperty('genTagging'))) {
  sourceSets {
    withGen
  }

  // Two MCGenTasks, one for the TagDef (with genTag=true) & one for the TagSchema
  var tagDefOutput = project.layout.buildDirectory.dir("generated-withSchemaSources/monticore/tagdef")
  var tagSchemaOutput = project.layout.buildDirectory.dir("generated-withSchemaSources/monticore/tagschema")
  tasks.register("generateTagDefGrammars", MCGenTask) {
    var generateMCGrammars = tasks.named("generateMCGrammars", MCGenTask).get()
    grammar.setFrom(generateMCGrammars.getTagDefOutput())
    outputDir = tagDefOutput
    modelPath.from(generateMCGrammars.getOutputDir()) // the directory hierarchy is required here
    if (findProperty("ci") != null) {
      script = "de/monticore/monticore_noreports.groovy" // noreports workflow script
    }
    genTag = true
  }
  tasks.register("generateTagSchemaGrammars", MCGenTask) {
    var generateMCGrammars = tasks.named("generateMCGrammars", MCGenTask).get()
    grammar.setFrom(generateMCGrammars.getTagSchemaOutput())
    outputDir = tagSchemaOutput
    modelPath.from(generateMCGrammars.getOutputDir()) // the directory hierarchy is required here
    if (findProperty("ci") != null) {
      script = "de/monticore/monticore_noreports.groovy"
    }
  }
  // define the withGen sourceSet
  sourceSets {
    withGen {
      java.srcDirs += tagDefOutput
      java.srcDirs += tagSchemaOutput
      compileClasspath += sourceSets.main.output
      runtimeClasspath += sourceSets.main.output
    }
  }

  configurations {
    withGenImplementation.extendsFrom implementation
    withGenRuntimeOnly.extendsFrom runtimeOnly
  }

  dependencies {
    withGenImplementation group:'junit', name:'junit', version:junit_version
    withGenImplementation project(path: ':monticore-grammar', configuration: 'tagging')
    withGenImplementation project(project.path)
  }

  // Register a jUnit platform
  tasks.register('withGenTest', Test) {
    description = 'Runs tests with tagGen.'
    group = 'verification'

    testClassesDirs = sourceSets.withGen.output.classesDirs
    classpath = sourceSets.withGen.runtimeClasspath
    shouldRunAfter test

    useJUnit()

  }

  check.dependsOn withGenTest

  compileWithGenJava.dependsOn(tasks.named("generateTagSchemaGrammars"))
  compileWithGenJava.dependsOn(tasks.named("generateTagDefGrammars"))

}